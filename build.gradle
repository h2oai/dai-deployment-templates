buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        jcenter()
    }
    dependencies {
        classpath group: 'org.springframework.boot', name: 'spring-boot-gradle-plugin',
                version: springBootPluginVersion
        classpath group: 'gradle.plugin.org.hidetake', name: 'gradle-swagger-generator-plugin',
                version: swaggerGradlePluginVersion
        classpath group: 'com.github.jengelman.gradle.plugins', name: 'shadow', version: shadowJarVersion
        classpath group: 'com.bmuschko', name: 'gradle-docker-plugin', version: dockerPluginVersion
        classpath group: 'com.diffplug.spotless', name: 'spotless-plugin-gradle', version: spotlessPluginVersion
    }
}

subprojects {
    repositories {
        mavenCentral()
    }

    apply plugin: 'java'
    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    apply plugin: 'io.spring.dependency-management'
    dependencyManagement {
        dependencies {
            dependencySet(group: 'ai.h2o', version: mojoRuntimeVersion) {
                entry 'mojo2-runtime-api'
                entry 'mojo2-runtime-impl'
            }
            dependency group: 'com.amazonaws', name: 'aws-lambda-java-core', version: awsLambdaCoreVersion
            dependency group: 'com.amazonaws', name: 'aws-lambda-java-events', version: awsLambdaEventsVersion
            dependency group: 'com.amazonaws', name: 'aws-java-sdk-s3', version: awsSdkS3Version
            dependency group: 'com.google.code.gson', name: 'gson', version: gsonVersion
            dependency group: 'com.google.truth.extensions', name: 'truth-java8-extension', version: truthVersion
            dependencySet(group: 'io.springfox', version: springFoxVersion) {
                entry 'springfox-swagger2'
                entry 'springfox-swagger-ui'
            }
            dependency group: 'io.swagger', name: 'swagger-annotations', version: swaggerCoreSpringVersion
            dependency group: 'io.swagger.core.v3', name: 'swagger-annotations', version: swaggerCoreVersion
            dependency group: 'io.swagger.codegen.v3', name: 'swagger-codegen-cli', version: swaggerCodegenVersion
            dependency group: 'javax.annotation', name: 'javax.annotation-api', version: javaxAnnotationVersion
            dependencySet(group: 'org.junit.jupiter', version: jupiterVersion) {
                entry 'junit-jupiter-api'
                entry 'junit-jupiter-engine'
            }
            dependencySet(group: 'org.mockito', version: mockitoVersion) {
                entry 'mockito-core'
                entry 'mockito-junit-jupiter'
            }
            dependency group: 'commons-cli', name: 'commons-cli', version: apacheCommonsCliVersion
            dependency group: 'org.slf4j', name: 'slf4j-log4j12', version: slf4jVersion
        }
    }

    apply plugin: 'com.diffplug.gradle.spotless'
    spotless {
        java {
            target project.fileTree(project.rootDir) {
                include '**/*.java'
                // Exclude generated and hidden folders.
                exclude '**/.*/**'
                exclude '**/build/**'
                // Exclude KDB related code.
                exclude '**/kdb-java/**'
                exclude '**/kdb-mojo-scorer/**'
            }
            googleJavaFormat('1.7')
        }
    }

    apply plugin: 'checkstyle'
    checkstyle {
        toolVersion '8.21'
        configFile = project(":").file("config/checkstyle/google_style.xml")
        configProperties = ["suppressionFile": project(":").file("config/checkstyle/suppressions.xml")]
    }
}

// Collect artifacts from all the deployment templates into a single ZIP to be released.
//
// This task is to be injected content from the individual deployment templates (in their child build.gradle files)
// as follows:
//
// rootProject.distributionZip {
//   dependsOn {ARTIFACT_BUILDING_TASK}
//   into(this.project.path.replace(":", "/")) {
//        from {ARTIFACT_PATH}
//    }
// }
//
// Example for a Java zip archive:
//
// rootProject.distributionZip {
//   dependsOn buildZip
//   into(this.project.path.replace(":", "/")) {
//     from buildZip.archivePath
//   }
// }
//
task distributionZip(type: Zip) {
    archiveName "${project.name}-${project.version}.zip"
    destinationDir(file(buildDir))
}

task printVersion {
    println project.version
}
