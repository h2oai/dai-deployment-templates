// Versions of dependencies. Try to keep these at the same version across the deployment templates to facilitate
// issue resolution.
ext {
    // Internal dependencies:
    mojoRuntimeVersion = '0.13.7'

    // External dependencies:
    awsLambdaCoreVersion = '1.2.0'
    awsLambdaEventsVersion = '2.2.3'
    awsSdkS3Version = '1.11.445'
    gsonVersion = '2.3.1'
    jupiterVersion = '5.3.1'
    springFoxVersion = '2.9.2'
    swaggerCodegenVersion = '3.0.0'
    swaggerCoreVersion = '2.0.5'
    truthVersion = '0.42'
}

allprojects {
    buildscript {
        ext {
            springBootVersion = '2.1.1.RELEASE'
            swaggerGradlePluginVersion = '2.15.1'
        }
        repositories {
            maven {
                url "https://plugins.gradle.org/m2/"
            }
        }
        dependencies {
            classpath group: 'org.springframework.boot', name: 'spring-boot-gradle-plugin', version: springBootVersion
            classpath group: 'gradle.plugin.org.hidetake', name: 'gradle-swagger-generator-plugin',
                    version: swaggerGradlePluginVersion
        }
    }

    repositories {
        mavenCentral()

        // Local H2O Nexus for fetching internal dependencies, e.g., mojo runtime.
        def localNexusLocation = "http://nexus:8081/nexus/repository"
        maven {
            url "$localNexusLocation/releases/"
        }
    }
}

// Collect artifacts from all the deployment templates into a signle ZIP to be released.
//
// This task is to be injected content from the individual deployment templates (in their child build.gradle files)
// as follows:
//
// rootProject.distributionZip {
//   dependsOn {ARTIFACT_BUILDING_TASK}
//   into(this.project.path.replace(":", "/")) {
//        from {ARTIFACT_PATH}
//    }
// }
//
// Example for a Java zip archive:
//
// rootProject.distributionZip {
//   dependsOn buildZip
//   into(this.project.path.replace(":", "/")) {
//     from buildZip.archivePath
//   }
// }
//
task distributionZip(type: Zip) {
    archiveName "${project.name}-${project.version}.zip"
    destinationDir(file(buildDir))
}

task printVersion {
    println project.version
}
