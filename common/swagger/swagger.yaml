swagger: '2.0'
info:
  description: >-
    This is a definition of the REST API for scoring from H2O. This API is
    intended to be used within DAI and eventually across all H2O scoring systems
  version: 1.0.0
  title: Scoring API - v1
  termsOfService: ''
  contact:
    email: support@h2o.ai
  license:
    name: License
    url: 'http://www.h2o.ai'
host: localhost
basePath: /
schemes:
  - https
  - http
paths:
  /model/id:
    get:
      tags:
        - metadata
      summary: Returns model id
      description: Returns unique id of the model loaded in the server and used for scoring
      operationId: getModelId
      produces:
        - text/plain
      parameters: []
      responses:
        '200':
          description: Successful operation
          schema:
            type: string
      security:
        - api_key: []
  '/model/schema':
    get:
      tags:
        - metadata
      summary: Describe a model
      description: Returns information about the model used for scoring, e.g., input schema.
      operationId: getModelInfo
      produces:
        - application/json
      parameters: []
      responses:
        '200':
          description: Successful operation
          schema:
            $ref: '#/definitions/Model'
  '/model/sample_request':
    get:
      tags:
        - metadata
      summary: Sample scoring request
      description: Builds a sample scoring request that would pass all validations
      operationId: getSampleRequest
      produces:
        - application/json
      parameters: []
      responses:
        '200':
          description: Successful operation
          schema:
            $ref: '#/definitions/ScoreRequest'
  '/model/score':
    post:
      tags:
        - scoring
      summary: Score on given rows
      description: Computes score of the rows sent in the body of the post request
      operationId: getScore
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: payload
          in: body
          required: true
          schema:
            $ref: '#/definitions/ScoreRequest'
      responses:
        '200':
          description: Successful operation
          schema:
            $ref: '#/definitions/ScoreResponse'
        '400':
          description: Invalid payload
    get:
      tags:
        - scoring
      summary: Score on given file
      description: Computes score of the rows in the file specified by the path in the query parameter
      operationId: getScoreByFile
      produces:
        - application/json
      parameters:
        - in: query
          name: file
          type: string
      responses:
        '200':
          description: Successful operation
          schema:
            $ref: '#/definitions/ScoreResponse'
        '400':
          description: Invalid payload
securityDefinitions:
  api_key:
    type: apiKey
    name: api_key
    in: header
definitions:
  Model:
    type: object
    properties:
      id:
        type: string
      name:
        type: string
      description:
        type: string
      properties:
        type: object
        properties:
          scoringType:
            type: string
            enum:
              - REGRESSION
              - CLASSIFICATION
              - BINOMIAL
          scoringResponLabels:
            type: array
            items:
              type: string
      schema:
        $ref: '#/definitions/ModelSchema'
  Row:
    type: array
    items:
      type: string
  ScoreRequest:
    type: object
    properties:
      includeFieldsInOutput:
        type: array
        items:
          type: string
      fields:
        type: array
        items:
          type: string
      rows:
        type: array
        items:
          $ref: '#/definitions/Row'
  ScoreResponse:
    type: object
    properties:
      id:
        type: string
      score:
        type: array
        items:
          $ref: '#/definitions/Row'
  DataField:
    type: object
    properties:
      name:
        type: string
      dataType:
        type: string
        enum:
          - Bool
          - Int32
          - Int64
          - Float32
          - Float64
          - Str
          - Time64
      example:
        type: string
  ModelSchema:
    type: object
    properties:
      inputFields:
        type: array
        items:
          $ref: '#/definitions/DataField'
      targetFields:
        type: array
        items:
          $ref: '#/definitions/DataField'
      outputFields:
        type: array
        items:
          $ref: '#/definitions/DataField'
